;;; clock.scm

(define-module (indicator module clock)
  #:use-module (indicator config)
  #:use-module (indicator graph)
  #:export (draw-number! draw-clock!))

;; TODO: Implement as a vector.
(define %numbers
  '((0 . ((1 1 1)
          (1 0 1)
          (1 0 1)
          (1 0 1)
          (1 1 1)))
    (1 . ((1 1 0)
          (0 1 0)
          (0 1 0)
          (0 1 0)
          (1 1 1)))
    (2 . ((1 1 1)
          (0 0 1)
          (0 1 0)
          (1 0 0)
          (1 1 1)))
    (3 . ((1 1 1)
          (0 0 1)
          (0 1 1)
          (0 0 1)
          (1 1 1)))
    (4 . ((1 0 1)
          (1 0 1)
          (1 1 1)
          (0 0 1)
          (0 0 1)))
    (5 . ((1 1 1)
          (1 0 0)
          (1 1 1)
          (0 0 1)
          (1 1 1)))
    (6 . ((1 1 1)
          (1 0 0)
          (1 1 1)
          (1 0 1)
          (1 1 1)))
    (7 . ((1 1 1)
          (0 0 1)
          (0 1 0)
          (1 0 0)
          (1 0 0)))
    (8 . ((1 1 1)
          (1 0 1)
          (1 1 1)
          (1 0 1)
          (1 1 1)))
    (9 . ((1 1 1)
          (1 0 1)
          (1 1 1)
          (0 0 1)
          (1 1 1)))))

(define (draw-number! bv number offset color)
  "Draw NUMBER using the given bytevector BV with a COLOR."
  (let* ((num   (cdr (assoc number %numbers)))
         (len-x (length (car num)))
         (len-y (length num)))
    (do ((x 0 (1+ x)))
        ((= x len-x))
      (do ((y 0 (1+ y)))
          ((= y len-y))
        (or (zero? (list-ref (list-ref num y) x))
            (draw-point! bv (+ x offset) y color))))))

(define (draw-10! bv number color)
  (draw-number! bv (truncate/ number 10) 0 color)
  (draw-number! bv (truncate-remainder number 10) 4 color))

(define (draw-minutes! bv number color)
  ;; (format #t "(/ number %led-panel-width) => ~a~%" (/ number %led-panel-width))
  ;; (format #t "(- %led-panel-heigh 1) => ~a~%" (- %led-panel-heigh 1))
  (draw-rectangle! bv
                   0 5
                   (/ number %led-panel-width)
                   (- %led-panel-heigh 2)
                   color))

(define (draw-seconds! bv number color)
  (draw-line! bv
              0 (1- %led-panel-heigh)
              (/ number %led-panel-width)
              (1- %led-panel-heigh)
              color))


(define (draw-clock! bv)
  (let* ((tm   (localtime (current-time)))
         (hour (tm:hour tm))
         (min  (tm:min  tm))
         (sec  (tm:sec  tm)))
    (draw-10! bv hour #x4)
    (draw-minutes! bv min #x6)
    (draw-seconds! bv sec #x7)))

;;; clock.scm ends here.
