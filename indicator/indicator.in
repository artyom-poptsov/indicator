#!/bin/sh
# aside from this initial boilerplate, this is actually -*- scheme -*- code
export GUILE_LOAD_PATH=__DATA_DIR__
main='(module-ref (resolve-module '\''(indicator indicator)) '\'main')'
exec ${GUILE-guile} -l $0 -c "(apply $main (command-line))" "$@"
!#

;;; indicator.in -- Indicator

(define-module (indicator indicator)
  #:use-module (ice-9     rdelim)
  #:use-module (ice-9     getopt-long)
  #:use-module (indicator termios)
  ;; RPC
  #:use-module (rpc rpc)
  #:use-module (rpc rpc server)
  #:use-module (rpc xdr)
  #:use-module (rpc xdr types)
  #:use-module (indicator rpc-types+constants)
  #:use-module (indicator rpc-server))


;;; Global symbols

(define %state-default 0)
(define %state-notice  1)
(define %state-warning 2)
(define %state-demo    3)
(define %state-custom  4)

(define %default-port "12468")

(define *device-port* #f)

;;;


(define (set-status status)
  "Set Indicator STATUS."
  (display status *device-port*)
  'SUCCESS)

(define (run-rpc-server server-socket)
  "Run RPC server and bind it to the SERVER-SOCKET."
  (let ((indicator-rpc-server (make-INDICATOR-PROGRAM-server
                               `(("INDICATOR_VERSION"
                                  ("set_status" . ,set-status)))))
        (timeout    1000000)
        (idle-thunk (lambda () #f)))
    (run-stream-rpc-server (list (cons server-socket indicator-rpc-server))
                           timeout
                           #f               ;Close connections handler
                           idle-thunk)))

(define (open-server-socket address port)
  "Open and bind the socket to the given ADDRESS and PORT.  Start
listen to the socket and return it as the result."
  (let ((server-socket (socket PF_INET SOCK_STREAM 0)))
    (bind server-socket AF_INET INADDR_ANY port)
    (listen server-socket 1)
    server-socket))


(define (open-and-configure-device device)
  "Open serial port pointed by DEVICE path and convigure it.  Return
the port."
  (let* ((p       (open device O_RDWR))
         (fd      (port->fdes p))
         (termios (tcgetattr fd)))

  (cfsetspeed! termios B9600)
  (cfmakeraw! termios)
  (tcsetattr! termios fd)

  p))

(define (print-help-and-exit)
  "Print help message and exit."
  (display "\
Usage: indicator [options]

Options:
  --help, -h    Print this message and exit
  --port, -p    Set RPC server port
  --device, -d  Path to the serial port to which Indicator is connected
")
  (exit))


(define (main . args)
  "Entry point of the program."

  (let* ((option-spec '((help   (single-char #\h) (value #f))
                        (port   (single-char #\p) (value #t))
                        (device (single-char #\d) (value #t))))
         (options     (getopt-long args option-spec))
         (help-wanted (option-ref options 'help #f))
         (port        (option-ref options 'port %default-port))
         (device      (option-ref options 'device #f)))

    (and help-wanted
         (print-help-and-exit))

    (or device
        (error "Device must be specified (see `--device' option)"))

    (set! *device-port* (open-and-configure-device device))

    (let ((server-socket (open-server-socket "localhost"
                                             (string->number port))))
      (format #t "Listening on port ~a ...~%" port)
      (run-rpc-server server-socket))))

;;; indicator.in ends here
